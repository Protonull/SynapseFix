plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    // https://fabricmc.net/versions.html
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand([
                "mod_version": rootProject.mod_version,
                "mod_description": rootProject.mod_description,
                "mod_home_url": rootProject.mod_home_url,
                "mod_source_url": rootProject.mod_source_url,

                "minecraft_version": rootProject.minecraft_version,
                "fabric_loader_version": rootProject.fabric_loader_version
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

tasks.register("cleanJar", Delete) {
    delete fileTree("../dist") {
        include "*-fabric.jar"
    }
}

tasks.register("copyJar", Copy) {
    from remapJar
    into "../dist"
}

build.dependsOn copyJar
copyJar.dependsOn cleanJar
